package com.example.day16.repo.local

import android.content.Context
import androidx.room.*
import androidx.sqlite.db.SupportSQLiteOpenHelper
import com.example.day16.model.WeatherResponse
import com.example.day16.repo.dao.WeatherResponseDao

@Database(entities = [WeatherResponse::class], version = 1)
@TypeConverters(Converters::class)
abstract class WeatherDB : RoomDatabase() {
    /**
     * Creates the open helper to access the database. Generated class already implements this
     * method.
     * Note that this method is called when the RoomDatabase is initialized.
     *
     * @param config The configuration of the Room database.
     * @return A new SupportSQLiteOpenHelper to be used while connecting to the database.
     */
    override fun createOpenHelper(config: DatabaseConfiguration?): SupportSQLiteOpenHelper {
        TODO("Not yet implemented")
    }

    /**
     * Called when the RoomDatabase is created.
     *
     *
     * This is already implemented by the generated code.
     *
     * @return Creates a new InvalidationTracker.
     */
    override fun createInvalidationTracker(): InvalidationTracker {
        TODO("Not yet implemented")
    }

    /**
     * Deletes all rows from all the tables that are registered to this database as
     * [Database.entities].
     *
     *
     * This does NOT reset the auto-increment value generated by [PrimaryKey.autoGenerate].
     *
     *
     * After deleting the rows, Room will set a WAL checkpoint and run VACUUM. This means that the
     * data is completely erased. The space will be reclaimed by the system if the amount surpasses
     * the threshold of database file size.
     *
     * @see [Database File Format](https://www.sqlite.org/fileformat.html)
     */
    override fun clearAllTables() {
        TODO("Not yet implemented")
    }


    abstract fun weatherResponseDao(): WeatherResponseDao

    companion object {
        private const val DB_NAME = "WeatherDb.db"
        private var INSTANCE: WeatherDB? = null

        fun getDatabase(context: Context): WeatherDB? {
            if (INSTANCE == null)
                synchronized(WeatherDB::class.java) {
                    if (INSTANCE == null) {
                        INSTANCE = Room.databaseBuilder(
                            context.applicationContext, WeatherDB::class.java, DB_NAME
                        ).build()

                    }
                }
            return INSTANCE

        }


    }





}